


Realm.Library.Network
- Update the Threading usage
- Need a better way of determining what Formatter to pass into TcpUser


Realm.Library.Lua
- Threaded
- Execute takes a script object instead of a string
- Throws Events
- Lua Client object
  - RunScript virtual method
  - Constructor takes ILuaVirtualMachine
  - LuaScript object (inherits entity)
  - Script cache?

LuaClient 
  - Object that implements the base process for executing a lua script
ILuaLoadBalancer 
  - Interface that defines a entry point method for a Singleton
LuaVirtualMachine
  - Instantiates its own local LuaInterface.Lua object
  - Assigns requests to a Task
  - Constructor takes a LuaFunctionRepository
LuaVMContext
  - Instantiates a number of LuaVMs
  - Constructor takes a parameter indicating the number of VMs
  - Constructor takes a LuaScriptCache
LuaFunctionRepository
  - Stores LuaFunctions by name
LuaScriptCache
  - Stores LuaScripts and inserted date
  - Constructor takes "lifetime" value
LuaScript
  - Object which encapsulates a script reference (either a filepath or a script string)

LuaFunctionAttribute
  - Defines a function as a LuaFunction
LuaFunctionDescriptor
  - Defines a LuaFunction

LuaHelper
  - Some useful LuaFunctions
LuaExtension
  - Common Lua functions that manipulate the VM directly
  
  
- Create A* pathfinding in the common library?
http://www.codeproject.com/Articles/118015/Fast-A-Star-2D-Implementation-for-C

Based on:
http://www.codeguru.com/csharp/csharp/cs_misc/designtechniques/article.php/c12527/AStar-A-Implementation-in-C-Path-Finding-PathFinder.htm








Template -> Takes Definition as part of Constructor
Instance -> Takes Template as part of Constructor
Concrete -> Takes Definition as part of Constructor

Condition Library: http://conditions.codeplex.com/

Types:
Concrete -> Hybrid Instance/Template
Template -> Static data
Instance -> Live data, Template as parent


Loaders are passed a factory, factories are not stored in the EntityManager

StaticDataManger loads dictionary atoms associated with types
 - loads string data

http://www.codeproject.com/Articles/255684/Create-and-Consume-RESTFul-Service-in-NET-Framewor
http://www.aspfree.com/c/a/ASP.NET/Developing-a-WCF-Service-Library-and-Hosting-it-as-WCF-Web-Service-Using-VS2K8/


concepts to take into account:

Great Site: http://www.albahari.com/threading/

AsParallel() -> Uses threading (black box)
list.AsParallel().Where(condition).ToList();

Parallel class
Parallel.Invoke(
	{
		() => function,
		() => function
	});

var task = new Task<IEnumerable<int>>( () => function );
task.Start();
task.Wait();

foreach(var n in task.Result)
{
// do something
}


CLEAN-UP SUGGESTIONS

Remove boolean Function Parameters
- Instead change function name (DoThis and DoThisAndThis)

Replace functions with 4 or more parameters with an object
- DoThis(param1, param2, param3, param4) with DoThis(SomeRequest)
- Where SomeRequest contains the four parameters

Only one Exit Point to a function (bool isValid)

Replace code blocks that require comments with well-named function
if (account.IsVip && account.IsPastDue)
{ 
	SendNotification = false;
}

with

CancelNotificationForVipAccounts();

Keep methods short
up to 20 lines, fine
up to 50 re-evaluate
greater than 50, rewrite

