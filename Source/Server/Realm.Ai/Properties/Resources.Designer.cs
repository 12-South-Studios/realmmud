//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Realm.Ai.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Realm.Ai.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Owner[{0}, {1}] is not an IRegularMob..
        /// </summary>
        internal static string ERR_AI_OWNER_NOT_MOBILE {
            get {
                return ResourceManager.GetString("ERR_AI_OWNER_NOT_MOBILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AiState[{0}] found no Owner.
        /// </summary>
        internal static string ERR_AISTATE_NO_OWNER {
            get {
                return ResourceManager.GetString("ERR_AISTATE_NO_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mob[{0}, {1}] has a null Location..
        /// </summary>
        internal static string ERR_MOBILE_NO_LOCATION {
            get {
                return ResourceManager.GetString("ERR_MOBILE_NO_LOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Already at destination.
        /// </summary>
        internal static string MSG_AI_ALREADY_AT_DESTINATION {
            get {
                return ResourceManager.GetString("MSG_AI_ALREADY_AT_DESTINATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not moving this tick.
        /// </summary>
        internal static string MSG_AI_CHOSE_NOT_TO_MOVE {
            get {
                return ResourceManager.GetString("MSG_AI_CHOSE_NOT_TO_MOVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I&apos;m in combat, can&apos;t wander!  How did WanderState get to the top?.
        /// </summary>
        internal static string MSG_AI_COMBAT_CANNOT_WANDER {
            get {
                return ResourceManager.GetString("MSG_AI_COMBAT_CANNOT_WANDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid move location.
        /// </summary>
        internal static string MSG_AI_INVALID_DESTINATION {
            get {
                return ResourceManager.GetString("MSG_AI_INVALID_DESTINATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I&apos;m moving to destination {0}.
        /// </summary>
        internal static string MSG_AI_MOVING_TO {
            get {
                return ResourceManager.GetString("MSG_AI_MOVING_TO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mob[{0}, {1}] =&gt; NeedState =&gt; IsDead..
        /// </summary>
        internal static string MSG_AI_NEEDSTATE_ISDEAD {
            get {
                return ResourceManager.GetString("MSG_AI_NEEDSTATE_ISDEAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mob[{0}, {1}] =&gt; NeedState =&gt; DoNothing..
        /// </summary>
        internal static string MSG_AI_NEEDSTATE_NOTHING {
            get {
                return ResourceManager.GetString("MSG_AI_NEEDSTATE_NOTHING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mob[{0}, {1}] =&gt; NeedState =&gt; State[{2}, {3}]..
        /// </summary>
        internal static string MSG_AI_NEEDSTATE_STATE {
            get {
                return ResourceManager.GetString("MSG_AI_NEEDSTATE_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No portal from my current location to my destination.
        /// </summary>
        internal static string MSG_AI_NO_PORTAL_TO_DESTINATION {
            get {
                return ResourceManager.GetString("MSG_AI_NO_PORTAL_TO_DESTINATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I&apos;m a stationary mob!  Why do I have a Wander state?.
        /// </summary>
        internal static string MSG_AI_STATIONARY_CANNOT_WANDER {
            get {
                return ResourceManager.GetString("MSG_AI_STATIONARY_CANNOT_WANDER", resourceCulture);
            }
        }
    }
}
